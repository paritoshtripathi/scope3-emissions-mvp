version: '3.8'

services:
  postgres:
    image: postgres:14
    environment:
      POSTGRES_DB: scope3_db
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - ./database/postgres/data:/var/lib/postgresql/data
      - ./database/postgres/init.sql:/docker-entrypoint-initdb.d/01_init.sql
      - ./database/postgres/migrations:/docker-entrypoint-initdb.d/migrations
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  neo4j:
    image: neo4j:5.15.0
    environment:
      NEO4J_AUTH: "neo4j/scope3password"
      NEO4J_dbms_memory_pagecache_size: 1G
      NEO4J_dbms_memory_heap_initial__size: 1G
      NEO4J_dbms_memory_heap_max__size: 2G
    ports:
      - "7474:7474"  # HTTP (browser)
      - "7687:7687"  # Bolt (driver)
    volumes:
      - ./database/neo4j/data:/data
      - ./database/neo4j/logs:/logs
      - ./database/neo4j/import:/import
      - ./database/neo4j/plugins:/plugins
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7474"]
      interval: 10s
      timeout: 5s
      retries: 5


  rag-api:
    build:
      context: ./ai-ml
      dockerfile: Dockerfile.ai-ml
      args:
        - HUGGINGFACE_API_TOKEN="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"
    env_file:
      - ./ai-ml/.env
    ports:
      - "5000:5000"
    volumes:
      - ./ai-ml/models:/app/models
      - ./ai-ml/kb:/app/kb
    environment:
      - PYTHONPATH=/app
      # LLM Configuration
      - HUGGINGFACE_API_TOKEN=${HUGGINGFACE_API_TOKEN}
      - DEFAULT_LLM_MODEL=llama3
      - LLM_TEMPERATURE=0.2
      - LLM_MAX_TOKENS=250
      # Embedding Models
      - DOCUMENT_MODEL=sentence-transformers/all-mpnet-base-v2
      - CHUNK_MODEL=sentence-transformers/all-MiniLM-L6-v2
      - SEMANTIC_MODEL=sentence-transformers/paraphrase-multilingual-mpnet-base-v2
      # Neo4j Configuration
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-scope3password}
      # FAISS Configuration
      - FAISS_INDEX_TYPE=IVFFlat
      - VECTOR_DIMENSION=768
      - KB_STORAGE_DIR=/app/kb
      # API Configuration
      - PORT=5000
      - DEBUG=false
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    command: gunicorn --bind 0.0.0.0:5000 --workers 1 --timeout 120 --worker-class gevent src.rag.api.app:app

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/scope3_db
      - RAG_API_URL=http://rag-api:5000
    volumes:
      - ./backend/src:/app/src
      - ./backend/uploads:/app/uploads
    depends_on:
      - postgres
      - rag-api

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
    ports:
      - "4200:4200"
    environment:
      - BACKEND_URL=http://localhost:3000
    volumes:
      - ./frontend/src:/app/src
    depends_on:
      - backend